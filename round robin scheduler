#include<stdio.h>
#include<conio.h>
int main()
{
	int i,m;
	printf("\nenter number of processes: ");
	scanf("%d",&m);
	if(m<=0)
	{
		printf("\nWARNING:Enter valid number of process,number must be greater than zero");
		printf("\nenter number of processes: ");
	    scanf("%d",&m);
	}
	
	int arrival[m];
	int burst[m],burst1[m];
	int waiting[m];
	int tarrival[m];
	int tq1=6;
	int tq2=10;
	int avgT=0;
	int avgW=0;
	printf("\nEnter arival time of processes:");
	for(i=0;i<m;i++)
	{  printf("\nProcess %d :",i+1);
		scanf("%d",&arrival[i]);
	}
	printf("\nenter burst time for processes:");
	for(i=0;i<m;i++)
	{
		printf("\nProcess %d:",i+1);
		scanf("%d",&burst[i]);
		if(burst[i]<=0)
		{
		printf("\nWaring:---->Enter vaild burst time");
		printf("\nProcess %d:",i+1);
		scanf("%d",&burst[i]);
        }
        else
        {
        	burst[i]=burst[i];
		}
	}
	printf("**************First Iteration(Time slice:6)**********************\n");
	for(i=0;i<m;i++)
	{  
	if(arrival[i]<=tq1+arrival[i-1])
	{
	
		burst[i]=burst[i]-tq1;
		
		printf("\nprocess %d",i+1);
		printf("\nRemaining Burst= %d",burst[i]);}
		else
		{
		burst[i]=burst[i]-tq1;
	
		printf("\nprocess %d ",i+1);
		printf("\nRemaining= %d",burst[i]);	
		}
		}
	
	printf("**************Second Iteration(Time slice:10)**********************\n");
	for(i=0;i<m;i++)
	{
	if(arrival[i]<=tq2+arrival[i-1])
	{
	
		burst[i]=burst[i]-tq2;
		
		printf("\nprocess %d",i+1);
		printf("\nRemaing = %d",burst[i]);}
		else
		{
		burst[i]=burst[i]-tq2;
	
		printf("\nprocess %d",i+1);
		printf("\nRemaing = %d",burst[i]);	
		}	
	}
	printf("\n*************Thrid Iteration(Largest Remaining)*****************");
	int j,temp;

	for(i=0;i<m;i++)
	{
		for(j=i+1;j<m;j++)
		{if(burst[i]<burst[j])
		{
		
			temp=burst[i];
			burst[i]=burst[j];
			burst[j]=temp;
			}
		}
	}
	int ct[4]={114,110,117,90};
	for(i=0;i<m;i++)
	{
		tarrival[i]=ct[i]-arrival[i];
		waiting[i]=tarrival[i]-burst1[i];
		printf("\nCompletion time for process%d:%d \n",i+1,ct[i]);
		printf("Turn arround time for process:%d:%d \n",i+1,tarrival[i]);
		printf("Waiting time for process:%d : %d \n",i+1,waiting[i]);
		avgT=avgT+tarrival[i];
		avgW=avgW+waiting[i];
		
	}
	avgT=avgT/m;
	avgW=avgW/m;
	printf("\nAverage turn arrounf time: %d",avgT);
	printf("\nAverage waiting time:%d",avgW);
	}
